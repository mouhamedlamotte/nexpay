services:
  traefik:
      image: traefik:v3.5
      container_name: traefik
      command:
        - "--api.dashboard=true"
        - "--api.insecure=true"
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
        - "--entrypoints.web.address=:80"
        # - "--entrypoints.web.address=:443"
        # Auto SSL avec Let's Encrypt
        # - "--certificatesresolvers.letsencrypt.acme.email=${ADMIN_EMAIL}"
        # - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
        # - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      ports:
        - "9093:80"
        - "9091:8080"
        # - "443:443"
      volumes:
      - ./dev/config/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./dev/config/traefik/dynamic:/etc/traefik/dynamic
      environment:
        - APP_DOMAIN=${APP_DOMAIN}
      labels:
        # Dashboard Traefik (optionnel)
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.${APP_DOMAIN}`)"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=traefik-auth"
        - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH}" # user:password hash
      networks:
        - web
      extra_hosts:
        - "host.docker.internal:host-gateway"
      restart: unless-stopped
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    container_name: redis
    command: /bin/sh -c "redis-server --requirepass $REDIS_PASSWORD"
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    environment:
      - NODE_ENV=production
      - APP_PORT=9000
      - APP_NAME=${APP_NAME}
      - APP_DOMAIN=${APP_DOMAIN}
      - APP_VERSION=1.0.0
      - GLOBAL_PREFIX=api/v1
      - APP_URL=http://${APP_DOMAIN}/api/v1
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - CORS_ORIGIN=${APP_DOMAIN}
      - HELMET_CSP_DIRECTIVES=default-src 'self'
      - ENCRYPTION_KEY=0072ac7fffc1cfce186b308af5f874fe7f5795adcf1c3d3592a7c2c159e01811
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    command: sh -c "npx prisma migrate deploy && npm run prod"
    expose:
      - "9000"
    networks:
      - web
      - backend
    restart: unless-stopped
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: nexpay_web
    environment:
      - NEXT_PUBLIC_API_URL=http://${APP_DOMAIN}/api/v1
    expose:
      - 9001
    networks:
      - web



networks:
  web:
    name: web
  backend:
    internal: true

volumes:
  postgres_data:
  redis_data: